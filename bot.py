import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from database import save_idea, get_ideas, get_categories, add_category
import config
import random

bot = telebot.TeleBot(config.TELEGRAM_TOKEN)
user_categories = {}

def create_main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        'üí° –ù–æ–≤–∞—è –∏–¥–µ—è', 'üìö –ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        'üè∑Ô∏è –ú–æ–∏ —Ä—É–±—Ä–∏–∫–∏', '‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ',
    ]
    keyboard.add(*buttons)
    return keyboard

MOTIVATION = [
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã ‚Äî –º–∏—Ä –∂–¥–µ—Ç —Ç–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞! üåç",
    "–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–≤–æ–µ! ‚úçÔ∏è",
    "–°–µ–≥–æ–¥–Ω—è –∫—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ —Ç–≤–æ–µ–º –±–ª–æ–≥–µ! üî•",
    "–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –Ω–∞—Å—Ç–æ—è—â–∏–º ‚Äî –ø–∏—à–∏ –æ—Ç –¥—É—à–∏! üíñ",
    "–¢–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º! üöÄ"
]

@bot.message_handler(commands=['start'])
def start(message):
    welcome = (
        "üåü –ü—Ä–∏–≤–µ—Ç, –±–ª–æ–≥–µ—Ä!\n\n"
        "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n"
        "–ì–µ–Ω–µ—Ä–∏—Ä—É–π –∏–¥–µ–∏, —Ö—Ä–∞–Ω–∏ –∏—Ö –ø–æ —Ä—É–±—Ä–∏–∫–∞–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –∏ –≤–µ–¥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É."
    )
    bot.send_message(message.chat.id, welcome, reply_markup=create_main_menu())
    bot.send_message(message.chat.id, random.choice(MOTIVATION))

    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ —Ä—É–±—Ä–∏–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not get_categories(message.chat.id):
        for category in config.DEFAULT_CATEGORIES:
            add_category(message.chat.id, category)

@bot.message_handler(func=lambda msg: msg.text == 'üí° –ù–æ–≤–∞—è –∏–¥–µ—è')
def new_idea(message):
    user_id = message.chat.id
    categories = get_categories(user_id)
    if not categories:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä—É–±—Ä–∏–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üè∑Ô∏è –ú–æ–∏ —Ä—É–±—Ä–∏–∫–∏'")
        return
    keyboard = InlineKeyboardMarkup()
    for category in categories:
        keyboard.add(InlineKeyboardButton(category, callback_data=f"cat_{category}"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ä—É–±—Ä–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∏–¥–µ–∏:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def process_text_category(call):
    try:
        user_id = call.message.chat.id
        category = call.data[4:]
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=f"üí° –í–≤–µ–¥–∏ —Ç–µ–º—É/–∏–¥–µ—é –¥–ª—è —Ä—É–±—Ä–∏–∫–∏ '{category}':"
        )
        user_categories[user_id] = category
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda msg: msg.chat.id in user_categories)
def process_idea_text(message):
    try:
        user_id = message.chat.id
        category = user_categories[user_id]
        theme = message.text
        save_idea(theme, user_id, category)
        bot.send_message(
            user_id,
            f"üéØ –ò–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Ä—É–±—Ä–∏–∫–µ '{category}':\n\n{theme}\n\nüíæ –ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!"
        )
        del user_categories[user_id]
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda msg: msg.text == 'üè∑Ô∏è –ú–æ–∏ —Ä—É–±—Ä–∏–∫–∏')
def manage_categories(message):
    user_id = message.chat.id
    categories = get_categories(user_id)
    if not categories:
        categories = ["–ü–æ–∫–∞ –Ω–µ—Ç —Ä—É–±—Ä–∏–∫"]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä—É–±—Ä–∏–∫—É", callback_data="add_category"))
    bot.send_message(
        user_id,
        f"üìÇ –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ä—É–±—Ä–∏–∫–∏:\n\n" + "\n".join([f"‚Ä¢ {cat}" for cat in categories]),
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "add_category")
def add_new_category(call):
    user_id = call.message.chat.id
    bot.send_message(user_id, "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä—É–±—Ä–∏–∫–∏:")
    bot.register_next_step_handler(call.message, save_new_category)

def save_new_category(message):
    try:
        user_id = message.chat.id
        category = message.text.strip()
        if not category:
            bot.send_message(user_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–±—Ä–∏–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        if len(category) > 30:
            bot.send_message(user_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 30 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        add_category(user_id, category)
        bot.send_message(user_id, f"‚úÖ –†—É–±—Ä–∏–∫–∞ '{category}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda msg: msg.text == 'üìö –ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
def my_ideas(message):
    user_id = message.chat.id
    ideas = get_ideas(user_id)
    if not ideas:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π.")
    else:
        text = "üóÉÔ∏è –í–∞—à–∏ –∏–¥–µ–∏:\n\n"
        for idx, idea in enumerate(ideas, 1):
            text += f"{idx}. [{idea['category']}] {idea['text']} ({idea['date']})\n"
        bot.send_message(user_id, text)

@bot.message_handler(func=lambda msg: msg.text == '‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ')
def inspire(message):
    bot.send_message(message.chat.id, random.choice(MOTIVATION))

if __name__ == "__main__":
    bot.infinity_polling()
